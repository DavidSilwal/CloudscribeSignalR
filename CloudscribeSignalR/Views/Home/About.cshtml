@{
    ViewData["Title"] = "About";
}
<h2>@ViewData["Title"].</h2>
<h3>@ViewData["Message"]</h3>
<p><input type="button" name="callApiNotifyAllButMe" id="callApiNotifyAllButMe" value="Call Api and notify all but me"/></p>
<p id="callApiNotifyAllButMeResult"></p>
<p><input type="button" name="callApiNotifyAll" id="callApiNotifyAll" value="Call Api and notify all, but only for 1 sec (set in sendAsync(object, duration) in Homecontroller:About()"/></p>
<p id="callApiNotifyAllResult"></p>
<p><input type="button" name="callApiNotifyOnlyMe" id="callApiNotifyOnlyMe" value="Call Api and notify only me"/></p>
<p id="callApiNotifyOnlyMeResult"></p>
<p><input type="button" name="callApiCreateDesktopNotice" id="callApiCreateDesktopNotice" value="Call Api and show a Desktop Notice" /> (Implements the <a href="http://www.w3.org/TR/notifications/">Web Notifications spec.</a></p>
<p id="callApiCreateDesktopNoticeResult"></p>

@section scripts {
    <script type="text/javascript">
        // create the clicky stuff seperately
        $(function () {
            $("#callApiNotifyAllButMe").click(function(){
                $.ajax({
                    url: "/api/ApiExampleMethod",
                    data: "notify=butme"
                }).done(function(data) {
                    $('#callApiNotifyAllButMeResult').text("/api/ApiExampleMethod returned ID:" + data.id + " and text: " + data.name);
                    }).error(function(e) {
                    console.log("error" + e);
                });
            });
            $("#callApiNotifyOnlyMe").click(function () {
                $.ajax({
                    url: "/api/ApiExampleMethod",
                    data: "notify=onlyme"
                }).done(function(data) {
                    $('#callApiNotifyOnlyMeResult').text("/api/ApiExampleMethod returned ID:" + data.id + " and text: " + data.name);
                    }).error(function(e) {
                    console.log("error" + e);
                });
            });
            $("#callApiNotifyAll").click(function () {
                $.ajax({
                    url: "/api/ApiExampleMethod",
                    data: "notify=all"
                }).done(function(data) {
                    $('#callApiNotifyAllResult').text("/api/ApiExampleMethod returned ID:" + data.id + " and text: " + data.name);
                    }).error(function(e) {
                    console.log("error" + e);
                });
            });
            $("#callApiCreateDesktopNotice").click(function () {
                $.ajax({
                    url: "/api/ApiExampleMethod",
                    data: "notify=desktop"
                }).done(function(data) {
                    $('#callApiCreateDesktopNoticeResult').text("/api/ApiExampleMethod returned ID:" + data.id + " and text: " + data.name);
                }).error(function(e) {
                    console.log("error" + e);
                });
            });
        });

    </script>
    <script type="text/javascript">
        PNotify.prototype.options.styling = "bootstrap3";
        var PnotifyAnimate_in = "rollIn", PnotifyAnimate_out = "fadeOutDown";
        // keeps the connection object
        var connection = null;
        // myOwnID to deduplicate calls from this client
        var myIdentification;
        // is a confirm notification currently displayed? Used to suppress additional dialogues
        var notificationDisplayed = false;

        let connectionLogLevel = signalR.LogLevel.Information;
        connection = new signalR.HubConnection("/signalr", {logger: connectionLogLevel, transport: signalR.TransportType.ServerSentEvents });
        connection.on("Identification",
            userId => {
                console.log("signalrOnIdentification: "+userId);
                myIdentification = userId;
            });
        connection.on("NotifyConfirm",
            callerIdentification => {
                console.log("signalR-OnNotification");
                if (callerIdentification == myIdentification) {
                    console.log("suppressed notificationDisplayed");
                } else if (notificationDisplayed) {
                    console.log("suppressed notificationDisplayed; already open");
                } else {
                    notificationDisplayed = true;
                    (new PNotify({
                        title: "Data has changed or somehing like that!",
                        text:
                            "Data has been changed - and it wasn't you! Fetch the fresh stuff?",
                        icon: "glyphicon glyphicon-question-sign",
                        hide: false,
                        confirm: {
                            confirm: true
                        },
                        buttons: {
                            closer: false,
                            sticker: false
                        },
                        history: {
                            history: false
                        },
                        animate: {
                            animate: true,
                            in_class: PnotifyAnimate_in,
                            out_class: PnotifyAnimate_out
                        },
                        after_init: function (notice) {
                            notice.attention('pulse');
                        }
                    })).get().on('pnotify.confirm', function ()
                    {
                        alert("confirmed");
                        notificationDisplayed = false;
                    }).on('pnotify.cancel', function (event, notice)
                    {
                        notificationDisplayed = false;
                        notice.update({
                            type: "error",
                            title: "Sure, why not cancel",
                            text: "Don't cry if you don't have the latest stuff though.",
                            delay: 2000,
                            confirm: {
                                confirm: false
                            }
                        });
                        notice.attention('swing');
                        notice.queueRemove();
                        return false;
                    });
                }
            });

        connection.onclose(e => {
            if (e) {
                console.log('Connection closed with error: ' + e);
            } else {
                console.log('Disconnected (properly)');
            }
        });
        // let's get a json object to play and configure some of pnotify using it
        connection.on("Notify", (objMessage, duration) => {
            objMessage = jQuery.parseJSON(objMessage);
            (new PNotify({
                title: !("title" in objMessage) ? "No Title" : objMessage.title,
                text: !("text" in objMessage) ? "No Text" : objMessage.text,
                icon: "glyphicon glyphicon-envelope",
                type: "info",
                delay: Number.isInteger(duration) ? duration * 1000 : 2000,
                nonblock: {
                    nonblock: true
                },
                animate: {
                    animate: true,
                    in_class: PnotifyAnimate_in,
                    out_class: PnotifyAnimate_out
                },
                after_init: function (notice) {
                    notice.attention('pulse');
                }
            }));
        });
        connection.on("NotifyDesktop", (objMessage, duration) => {
            objMessage = jQuery.parseJSON(objMessage);
            var permission = (PNotify.desktop.permission());
            var notice = (new PNotify({
                title: !("title" in objMessage) ? "No Title" : objMessage.title,
                text: !("text" in objMessage) ? "No Text" : objMessage.text,
                desktop: {
                    desktop: true
                }/*,
                icon: "glyphicon glyphicon-envelope",
                type: "info",
                delay: Number.isInteger(duration) ? duration * 1000 : 2000,
                nonblock: {
                    nonblock: true
                },
                animate: {
                    animate: true,
                    in_class: PnotifyAnimate_in,
                    out_class: PnotifyAnimate_out
                },
                after_init: function (notice) {
                    notice.attention('pulse');
                }*/
            }));
            notice.get().click(function(e) {
                if ($('.ui-pnotify-closer, .ui-pnotify-sticker, .ui-pnotify-closer *, .ui-pnotify-sticker *').is(e.target)) return;
                alert('Hey! You clicked the desktop notification!');
            });
            setTimeout(function() {
                notice.update({
                    type: "info",
                    text: "Now I'm an info box!"
                });
            }, 4000);
        });
        connection.start().then(() => {
            console.log("Connection started");            
        }).catch(exception => {
            console.log("Error connecting", exception, connection);
        });
    </script>
}